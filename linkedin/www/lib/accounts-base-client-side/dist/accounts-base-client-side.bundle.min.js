(function(){var Meteor=Package.meteor.Meteor;var _=Package.underscore._;var Hook;(function(){Hook=function(options){var self=this;options=options||{};self.nextCallbackId=0;self.callbacks={};if(options.exceptionHandler)self.exceptionHandler=options.exceptionHandler;else if(options.debugPrintExceptions){if(!_.isString(options.debugPrintExceptions))throw new Error("Hook option debugPrintExceptions should be a string");self.exceptionHandler=options.debugPrintExceptions}};_.extend(Hook.prototype,{register:function(callback){var self=this;callback=Meteor.bindEnvironment(callback,self.exceptionHandler||function(exception){throw exception});var id=self.nextCallbackId++;self.callbacks[id]=callback;return{stop:function(){delete self.callbacks[id]}}},each:function(iterator){var self=this;Meteor._nodeCodeMustBeInFiber();var ids=_.keys(self.callbacks);for(var i=0;i<ids.length;++i){var id=ids[i];if(_.has(self.callbacks,id)){var callback=self.callbacks[id];if(!iterator(callback))break}}}})}).call(this);if(typeof Package==="undefined")Package={};Package["callback-hook"]={Hook:Hook}})();(function(){var Meteor=Package.meteor.Meteor;var Random=Package.random.Random;(function(){var key="_localstorage_test_"+Random.id();var retrieved;try{if(window.localStorage){window.localStorage.setItem(key,key);retrieved=window.localStorage.getItem(key);window.localStorage.removeItem(key)}}catch(e){}if(key===retrieved){Meteor._localStorage={getItem:function(key){return window.localStorage.getItem(key)},setItem:function(key,value){window.localStorage.setItem(key,value)},removeItem:function(key){window.localStorage.removeItem(key)}}}if(!Meteor._localStorage){Meteor._debug("You are running a browser with no localStorage or userData "+"support. Logging in from one tab will not cause another "+"tab to be logged in.");Meteor._localStorage={_data:{},setItem:function(key,val){this._data[key]=val},removeItem:function(key){delete this._data[key]},getItem:function(key){var value=this._data[key];if(value===undefined)return null;else return value}}}}).call(this);if(typeof Package==="undefined")Package={};Package.localstorage={}})();(function(){var Meteor=Package.meteor.Meteor;var _=Package.underscore._;var Tracker=Package.tracker.Tracker;var Deps=Package.tracker.Deps;var Random=Package.random.Random;var Hook=Package["callback-hook"].Hook;var DDP=Package.ddp.DDP;var Mongo=Package.mongo.Mongo;var Accounts,AccountsTest,EXPIRE_TOKENS_INTERVAL_MS,CONNECTION_CLOSE_DELAY_MS,getTokenLifetimeMs,onLoginHook,onLoginFailureHook,autoLoginEnabled,tokenRegex,match,makeClientLoggedOut,makeClientLoggedIn,storeLoginToken,unstoreLoginToken,storedLoginToken,storedLoginTokenExpires;(function(){Accounts={};Accounts._options={};var DEFAULT_LOGIN_EXPIRATION_DAYS=90;var MIN_TOKEN_LIFETIME_CAP_SECS=3600;EXPIRE_TOKENS_INTERVAL_MS=600*1e3;CONNECTION_CLOSE_DELAY_MS=10*1e3;Accounts.config=function(options){if(Meteor.isServer){__meteor_runtime_config__.accountsConfigCalled=true}else if(!__meteor_runtime_config__.accountsConfigCalled){Meteor._debug("Accounts.config was called on the client but not on the "+"server; some configuration options may not take effect.")}if(_.has(options,"oauthSecretKey")){if(Meteor.isClient)throw new Error("The oauthSecretKey option may only be specified on the server");if(!Package["oauth-encryption"])throw new Error("The oauth-encryption package must be loaded to set oauthSecretKey");Package["oauth-encryption"].OAuthEncryption.loadKey(options.oauthSecretKey);options=_.omit(options,"oauthSecretKey")}var VALID_KEYS=["sendVerificationEmail","forbidClientAccountCreation","restrictCreationByEmailDomain","loginExpirationInDays"];_.each(_.keys(options),function(key){if(!_.contains(VALID_KEYS,key)){throw new Error("Accounts.config: Invalid key: "+key)}});_.each(VALID_KEYS,function(key){if(key in options){if(key in Accounts._options){throw new Error("Can't set `"+key+"` more than once")}else{Accounts._options[key]=options[key]}}});if(Meteor.isServer)maybeStopExpireTokensInterval()};if(Meteor.isClient){Accounts.connection=Meteor.connection;if(typeof __meteor_runtime_config__!=="undefined"&&__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL){Accounts.connection=DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL)}}Meteor.users=new Mongo.Collection("users",{_preventAutopublish:true,connection:Meteor.isClient?Accounts.connection:Meteor.connection});Meteor.startup(function(){var ServiceConfiguration=Package["service-configuration"].ServiceConfiguration;Accounts.loginServiceConfiguration=ServiceConfiguration.configurations;Accounts.ConfigError=ServiceConfiguration.ConfigError});Accounts.LoginCancelledError=function(description){this.message=description};Accounts.LoginCancelledError.numericError=145546287;Accounts.LoginCancelledError.prototype=new Error;Accounts.LoginCancelledError.prototype.name="Accounts.LoginCancelledError";getTokenLifetimeMs=function(){return(Accounts._options.loginExpirationInDays||DEFAULT_LOGIN_EXPIRATION_DAYS)*24*60*60*1e3};Accounts._tokenExpiration=function(when){return new Date(new Date(when).getTime()+getTokenLifetimeMs())};Accounts._tokenExpiresSoon=function(when){var minLifetimeMs=.1*getTokenLifetimeMs();var minLifetimeCapMs=MIN_TOKEN_LIFETIME_CAP_SECS*1e3;if(minLifetimeMs>minLifetimeCapMs)minLifetimeMs=minLifetimeCapMs;return new Date>new Date(when)-minLifetimeMs};onLoginHook=new Hook({debugPrintExceptions:"onLogin callback"});onLoginFailureHook=new Hook({debugPrintExceptions:"onLoginFailure callback"});Accounts.onLogin=function(func){return onLoginHook.register(func)};Accounts.onLoginFailure=function(func){return onLoginFailureHook.register(func)}}).call(this);(function(){autoLoginEnabled=true;var accountsPaths=["reset-password","verify-email","enroll-account"];var attemptToMatchHash=function(hash,success){_.each(accountsPaths,function(urlPart){var token;tokenRegex=new RegExp("^\\#\\/"+urlPart+"\\/(.*)$");match=hash.match(tokenRegex);if(match){token=match[1];if(urlPart==="reset-password"){Accounts._resetPasswordToken=token}else if(urlPart==="verify-email"){Accounts._verifyEmailToken=token}else if(urlPart==="enroll-account"){Accounts._enrollAccountToken=token}}else{return}success(token,urlPart)})};var accountsCallbacks={};var enableAutoLogin=function(){Accounts._enableAutoLogin()};attemptToMatchHash(window.location.hash,function(token,urlPart){autoLoginEnabled=false;window.location.hash="";Meteor.startup(function(){if(accountsCallbacks[urlPart]){accountsCallbacks[urlPart](token,enableAutoLogin)}})});AccountsTest={attemptToMatchHash:attemptToMatchHash};Accounts.onResetPasswordLink=function(callback){if(accountsCallbacks["reset-password"]){Meteor._debug("Accounts.onResetPasswordLink was called more than once. "+"Only one callback added will be executed.")}accountsCallbacks["reset-password"]=callback};Accounts.onEmailVerificationLink=function(callback){if(accountsCallbacks["verify-email"]){Meteor._debug("Accounts.onEmailVerificationLink was called more than once. "+"Only one callback added will be executed.")}accountsCallbacks["verify-email"]=callback};Accounts.onEnrollmentLink=function(callback){if(accountsCallbacks["enroll-account"]){Meteor._debug("Accounts.onEnrollmentLink was called more than once. "+"Only one callback added will be executed.")}accountsCallbacks["enroll-account"]=callback}}).call(this);(function(){Meteor.userId=function(){return Accounts.connection.userId()};var loggingIn=false;var loggingInDeps=new Tracker.Dependency;Accounts._setLoggingIn=function(x){if(loggingIn!==x){loggingIn=x;loggingInDeps.changed()}};Meteor.loggingIn=function(){loggingInDeps.depend();return loggingIn};Meteor.user=function(){var userId=Meteor.userId();if(!userId)return null;return Meteor.users.findOne(userId)};Accounts.callLoginMethod=function(options){options=_.extend({methodName:"login",methodArguments:[{}],_suppressLoggingIn:false},options);_.each(["validateResult","userCallback"],function(f){if(!options[f])options[f]=function(){}});var loginCallbacks=_.once(function(error){if(!error){onLoginHook.each(function(callback){callback()})}else{onLoginFailureHook.each(function(callback){callback()})}options.userCallback.apply(this,arguments)});var reconnected=false;var onResultReceived=function(err,result){if(err||!result||!result.token){Accounts.connection.onReconnect=null}else{Accounts.connection.onReconnect=function(){reconnected=true;var storedToken=storedLoginToken();if(storedToken){result={token:storedToken,tokenExpires:storedLoginTokenExpires()}}if(!result.tokenExpires)result.tokenExpires=Accounts._tokenExpiration(new Date);if(Accounts._tokenExpiresSoon(result.tokenExpires)){makeClientLoggedOut()}else{Accounts.callLoginMethod({methodArguments:[{resume:result.token}],_suppressLoggingIn:true,userCallback:function(error){var storedTokenNow=storedLoginToken();if(error){if(storedTokenNow&&storedTokenNow===result.token){makeClientLoggedOut()}}loginCallbacks(error)}})}}}};var loggedInAndDataReadyCallback=function(error,result){if(reconnected)return;Accounts._setLoggingIn(false);if(error||!result){error=error||new Error("No result from call to "+options.methodName);loginCallbacks(error);return}try{options.validateResult(result)}catch(e){loginCallbacks(e);return}makeClientLoggedIn(result.id,result.token,result.tokenExpires);loginCallbacks()};if(!options._suppressLoggingIn)Accounts._setLoggingIn(true);Accounts.connection.apply(options.methodName,options.methodArguments,{wait:true,onResultReceived:onResultReceived},loggedInAndDataReadyCallback)};makeClientLoggedOut=function(){unstoreLoginToken();Accounts.connection.setUserId(null);Accounts.connection.onReconnect=null};makeClientLoggedIn=function(userId,token,tokenExpires){storeLoginToken(userId,token,tokenExpires);Accounts.connection.setUserId(userId)};Meteor.logout=function(callback){Accounts.connection.apply("logout",[],{wait:true},function(error,result){if(error){callback&&callback(error)}else{makeClientLoggedOut();callback&&callback()}})};Meteor.logoutOtherClients=function(callback){Accounts.connection.apply("getNewToken",[],{wait:true},function(err,result){if(!err){storeLoginToken(Meteor.userId(),result.token,result.tokenExpires)}});Accounts.connection.apply("removeOtherTokens",[],{wait:true},function(err){callback&&callback(err)})};var loginServicesHandle=Accounts.connection.subscribe("meteor.loginServiceConfiguration");Accounts.loginServicesConfigured=function(){return loginServicesHandle.ready()};var pageLoadLoginCallbacks=[];var pageLoadLoginAttemptInfo=null;Accounts.onPageLoadLogin=function(f){if(pageLoadLoginAttemptInfo)f(pageLoadLoginAttemptInfo);else pageLoadLoginCallbacks.push(f)};Accounts._pageLoadLogin=function(attemptInfo){if(pageLoadLoginAttemptInfo){Meteor._debug("Ignoring unexpected duplicate page load login attempt info");return}_.each(pageLoadLoginCallbacks,function(callback){callback(attemptInfo)});pageLoadLoginCallbacks=[];pageLoadLoginAttemptInfo=attemptInfo};if(Package.blaze){Package.blaze.Blaze.Template.registerHelper("currentUser",function(){return Meteor.user()});Package.blaze.Blaze.Template.registerHelper("loggingIn",function(){return Meteor.loggingIn()})}}).call(this);(function(){var lastLoginTokenWhenPolled;Meteor.loginWithToken=function(token,callback){Accounts.callLoginMethod({methodArguments:[{resume:token}],userCallback:callback})};Accounts._enableAutoLogin=function(){autoLoginEnabled=true;pollStoredLoginToken()};var loginTokenKey="Meteor.loginToken";var loginTokenExpiresKey="Meteor.loginTokenExpires";var userIdKey="Meteor.userId";Accounts._isolateLoginTokenForTest=function(){loginTokenKey=loginTokenKey+Random.id();userIdKey=userIdKey+Random.id()};storeLoginToken=function(userId,token,tokenExpires){Meteor._localStorage.setItem(userIdKey,userId);Meteor._localStorage.setItem(loginTokenKey,token);if(!tokenExpires)tokenExpires=Accounts._tokenExpiration(new Date);Meteor._localStorage.setItem(loginTokenExpiresKey,tokenExpires);lastLoginTokenWhenPolled=token};unstoreLoginToken=function(){Meteor._localStorage.removeItem(userIdKey);Meteor._localStorage.removeItem(loginTokenKey);Meteor._localStorage.removeItem(loginTokenExpiresKey);lastLoginTokenWhenPolled=null};storedLoginToken=Accounts._storedLoginToken=function(){return Meteor._localStorage.getItem(loginTokenKey)};storedLoginTokenExpires=function(){return Meteor._localStorage.getItem(loginTokenExpiresKey)};var storedUserId=function(){return Meteor._localStorage.getItem(userIdKey)};var unstoreLoginTokenIfExpiresSoon=function(){var tokenExpires=Meteor._localStorage.getItem(loginTokenExpiresKey);if(tokenExpires&&Accounts._tokenExpiresSoon(new Date(tokenExpires)))unstoreLoginToken()};if(autoLoginEnabled){unstoreLoginTokenIfExpiresSoon();var token=storedLoginToken();if(token){var userId=storedUserId();userId&&Accounts.connection.setUserId(userId);Meteor.loginWithToken(token,function(err){if(err){Meteor._debug("Error logging in with token: "+err);makeClientLoggedOut()}Accounts._pageLoadLogin({type:"resume",allowed:!err,error:err,methodName:"login",methodArguments:[{resume:token}]})})}}lastLoginTokenWhenPolled=token;var pollStoredLoginToken=function(){if(!autoLoginEnabled)return;var currentLoginToken=storedLoginToken();if(lastLoginTokenWhenPolled!=currentLoginToken){if(currentLoginToken){Meteor.loginWithToken(currentLoginToken,function(err){if(err)makeClientLoggedOut()})}else{Meteor.logout()}}lastLoginTokenWhenPolled=currentLoginToken};setInterval(pollStoredLoginToken,3e3)}).call(this);if(typeof Package==="undefined")Package={};Package["accounts-base"]={Accounts:Accounts,AccountsTest:AccountsTest}})();(function(){var Meteor=Package.meteor.Meteor;var Accounts=Package["accounts-base"].Accounts;var Mongo=Package.mongo.Mongo;var ServiceConfiguration;(function(){if(typeof ServiceConfiguration==="undefined"){ServiceConfiguration={}}ServiceConfiguration.configurations=new Mongo.Collection("meteor_accounts_loginServiceConfiguration",{_preventAutopublish:true,connection:Meteor.isClient?Accounts.connection:Meteor.connection});ServiceConfiguration.ConfigError=function(serviceName){if(Meteor.isClient&&!Accounts.loginServicesConfigured()){this.message="Login service configuration not yet loaded"}else if(serviceName){this.message="Service "+serviceName+" not configured"}else{this.message="Service not configured"}};ServiceConfiguration.ConfigError.prototype=new Error;ServiceConfiguration.ConfigError.prototype.name="ServiceConfiguration.ConfigError"}).call(this);if(typeof Package==="undefined")Package={};Package["service-configuration"]={ServiceConfiguration:ServiceConfiguration}})();Accounts=Package["accounts-base"].Accounts;